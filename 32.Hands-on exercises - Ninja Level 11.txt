
Section 32 : 32.Hands-on exercises - Ninja Level 11

..........................................................................

235. Hands-on exercise #1 :

/*
Start with this code. Instead of using the blank identifier,
make sure the code is checking and handling the error.
*/

That's a bad practice to throw an error away :
	bs, _ := json.Marshal(p1)

	package main

	import (
		"encoding/json"
		"fmt"
		"log"
	)

	type person struct {
		First   string
		Last    string
		Sayings []string
	}

	func main() {
		p1 := person{
			First:   "James",
			Last:    "Bond",
			Sayings: []string{"Shaken, not stirred", "Any last wishes?", "Never say never"},
		}

		bs, err := json.Marshal(p1)
		if err != nil {
			log.Println(err)
			return // Sortir de la fonction main en cas d'erreur
				   // lors de la sérialisation JSON
		}
		fmt.Println(string(bs))
	}

	{"First":"James","Last":"Bond","Sayings":["Shaken, not stirred","Any last wishes?","Never say never"]}

The entire purpose of this program is to marshal this data structure
to Jason and then print it out.

L'utilisation de return ici est une façon de gérer proprement une erreur
dans la fonction main sans exécuter le reste du code de la fonction,
car dans la plupart des applications Go, la fonction main est le point
d'entrée principal de l'application.
En sortant prématurément en cas d'erreur, on évite l'exécution du reste
de la logique qui pourrait dépendre du résultat de la sérialisation JSON.

.....................................

236. Hands-on exercise #2 :

/*
Start with this code. Create a custom error message using “fmt.Errorf”.
*/

	package main

	import (
		"encoding/json"
		"fmt"
		"log"
	)

	type person struct {
		First   string
		Last    string
		Sayings []string
	}

	func main() {
		p1 := person{
			First:   "James",
			Last:    "Bond",
			Sayings: []string{"Shaken, not stirred", "Any last wishes?", "Never say never"},
		}

		bs, err := toJSON(p1)
		if err != nil {
			log.Fatalln(err)
		}
		fmt.Println(string(bs))

	}

	func toJSON(a interface{}) ([]byte, error) {
		bs, err := json.Marshal(a)
		if err != nil {
			return []byte{}, fmt.Errorf("There was an error marshalling %v in toJSON: %v", a, err)
			// return []byte{}, errors.New(fmt.Sprintf("There was an error in toJSON %v", err))
		}
		return bs, nil
	}
	
	{"First":"James","Last":"Bond","Sayings":["Shaken, not stirred","Any last wishes?","Never say never"]}

	or :
	2009/11/10 23:00:00 There was an error marshalling {James Bond [Shaken, not stirred Any last wishes? Never say never]} in toJSON: <nil>

.....................................

237. Hands-on exercise #3 :

/*
Create a struct “customErr” which implements the builtin.error interface.
Create a func “foo” that has a value of type error as a parameter.
Create a value of type “customErr” and pass it into “foo”.
If you need a hint, here is one.
*/

	package main

	import (
		"fmt"
	)

	type customErr struct {
		err error
	}

	func (ce customErr) Error() string {
		return fmt.Sprintf("There is a custom error : %v", ce.err)
	}

	func main() {
		c1 := customErr{err: nil}
		foo(c1)
	}

	func foo(e error) {
		fmt.Println("foo ran -", e, "\n", e.(customErr).err)
	}

	foo ran - There is a custom error : <nil> 
	 <nil>

ASSERTION :
./prog.go:21:38: e.err undefined (type error has no field or method err)	 
-> e.err

type error has no field 'err' : 
you pass it in and type error and 'err' is not attached to error
'err' is attached to 'customErr'.
And so if I want to use that, I have to use ASSERTION.
	-> e.(customErr).err
That this type 'e' I'm asserting as type 'customErr'.

-> Assertion is like if you have something 'customErr' implementing
	an interface 'e' and you need to assert that it's actually this other type
	which is implementing the interface, you assert it like that : 'e.(customErr)'

CONVERSION : 
	package main

	import (
		"fmt"
	)

	type hotdog int

	func main() {
		var x hotdog = 42
		fmt.Println(x)
		fmt.Printf("%T\n", x)

		var y int
		y = int(x)
		fmt.Println(y)
		fmt.Printf("%T", y)
	}

	42
	main.hotdog
	42
	int

-> I'm converting type hotdog to type int and that's conversion.

.....................................

238. Hands-on exercise #4 :

/*
Starting with this code, use the 'sqrtError' struct AS A VALUE OF TYPE ERROR.
If you would like, use these numbers for your :
	● lat "50.2289 N"
	● long "99.4656 W"
*/

	package main

	import (
		"fmt"
		"log"
	)

	type sqrtError struct {
		lat  string
		long string
		err  error
	}

	func (se sqrtError) Error() string {
		return fmt.Sprintf("math error: %v %v %v", se.lat, se.long, se.err)
	}

	func main() {
		_, err := sqrt(-10.23)
		if err != nil {
			log.Println(err)
		}
	}

	func sqrt(f float64) (float64, error) {
		if f < 0 {
			// nme := errors.New("more coffee needed")
			nme := fmt.Errorf("\nsqrt math error; square root of negative number: %v", f)
			return 0, sqrtError{"50.2289 N", "99.4656 W", nme}
		}
		return 42, nil
	}
	
	2009/11/10 23:00:00 math error: 50.2289 N 99.4656 W 
	sqrt math error; square root of negative number: -10.23

.....................................

239. Hands-on exercise #5 :

We are going to learn about testing next.
For this exercise, take a moment and see how much you can figure out about testing
by reading the testing documentation & also Caleb Doxsey’s article on testing.
See if you can get a basic example of testing working.

Cf. https://pkg.go.dev/testing
Cf. https://www.golang-book.com/books/intro/12

